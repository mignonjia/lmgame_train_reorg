data:
  tokenizer: null
  train_files: ~/data/rlhf/gsm8k/train.parquet
  val_files: ~/data/rlhf/gsm8k/test.parquet
  prompt_key: prompt
  max_prompt_length: null
  max_response_length: null
  train_batch_size: null
  val_batch_size: null
  return_raw_input_ids: false
  return_raw_chat: false
  shuffle: true
  filter_overlong_prompts: false
  truncation: error
  image_key: images
actor_rollout_ref:
  hybrid_engine: true
  model:
    path: ${model_path}
    external_lib: null
    override_config: {}
    enable_gradient_checkpointing: true
    use_remove_padding: false
  actor:
    strategy: fsdp
    ppo_mini_batch_size: ${ppo_mini_batch_size}
    ppo_micro_batch_size: null
    ppo_micro_batch_size_per_gpu: ${micro_batch_size_per_gpu}
    use_dynamic_bsz: false
    ppo_max_token_len_per_gpu: 16384
    grad_clip: 1.0
    clip_ratio: 0.2
    entropy_coeff: 0.001
    use_kl_loss: false
    use_torch_compile: true
    kl_loss_coef: 0.001
    kl_loss_type: kl
    ppo_epochs: 1
    shuffle: false
    ulysses_sequence_parallel_size: 1
    checkpoint:
      contents:
      - model
      - hf_model
      - optimizer
      - extra
    optim:
      lr: 1.0e-06
      lr_warmup_steps: -1
      lr_warmup_steps_ratio: 0.0
      min_lr_ratio: null
      warmup_style: constant
      total_training_steps: -1
      betas:
      - 0.9
      - 0.999
    fsdp_config:
      wrap_policy:
        min_num_params: 0
      param_offload: false
      optimizer_offload: false
      fsdp_size: -1
    micro_batch_size_per_gpu: ${micro_batch_size_per_gpu}
    use_ref: true
    clip_ratio_low: 0.2
    clip_ratio_high: 0.28
  ref:
    fsdp_config:
      param_offload: false
      wrap_policy:
        min_num_params: 0
    log_prob_micro_batch_size: null
    log_prob_micro_batch_size_per_gpu: ${micro_batch_size_per_gpu}
    log_prob_use_dynamic_bsz: ${actor_rollout_ref.actor.use_dynamic_bsz}
    log_prob_max_token_len_per_gpu: ${actor_rollout_ref.actor.ppo_max_token_len_per_gpu}
    ulysses_sequence_parallel_size: ${actor_rollout_ref.actor.ulysses_sequence_parallel_size}
  rollout:
    name: vllm
    temperature: 1
    top_k: -1
    top_p: 1
    use_fire_sampling: false
    prompt_length: 1
    response_length: 400
    dtype: bfloat16
    gpu_memory_utilization: 0.5
    ignore_eos: false
    enforce_eager: false
    free_cache_engine: false
    load_format: dummy_dtensor
    tensor_model_parallel_size: 1
    max_num_batched_tokens: 20000
    max_model_len: 20000
    max_num_seqs: 1024
    log_prob_micro_batch_size: null
    log_prob_micro_batch_size_per_gpu: ${micro_batch_size_per_gpu}
    log_prob_use_dynamic_bsz: ${actor_rollout_ref.actor.use_dynamic_bsz}
    log_prob_max_token_len_per_gpu: ${actor_rollout_ref.actor.ppo_max_token_len_per_gpu}
    disable_log_stats: true
    enable_chunked_prefill: true
    do_sample: true
    'n': 1
    val_kwargs:
      top_k: -1
      top_p: 1.0
      temperature: 0
      'n': 1
      do_sample: false
    rollout_filter_ratio: 0.25
    rollout_filter_type: std
critic:
  strategy: fsdp
  optim:
    lr: 1.0e-05
    lr_warmup_steps_ratio: 0.0
    min_lr_ratio: null
    warmup_style: constant
    total_training_steps: -1
    betas:
    - 0.9
    - 0.999
  model:
    path: ${model_path}
    tokenizer_path: ${actor_rollout_ref.model.path}
    override_config: {}
    external_lib: ${actor_rollout_ref.model.external_lib}
    enable_gradient_checkpointing: true
    use_remove_padding: false
    fsdp_config:
      param_offload: false
      optimizer_offload: false
      wrap_policy:
        min_num_params: 0
      fsdp_size: -1
  ppo_mini_batch_size: ${ppo_mini_batch_size}
  ppo_micro_batch_size: null
  ppo_micro_batch_size_per_gpu: ${micro_batch_size_per_gpu}
  forward_micro_batch_size: ${critic.ppo_micro_batch_size}
  forward_micro_batch_size_per_gpu: ${critic.ppo_micro_batch_size_per_gpu}
  use_dynamic_bsz: ${actor_rollout_ref.actor.use_dynamic_bsz}
  ppo_max_token_len_per_gpu: 32768
  forward_max_token_len_per_gpu: ${critic.ppo_max_token_len_per_gpu}
  ulysses_sequence_parallel_size: 1
  ppo_epochs: ${actor_rollout_ref.actor.ppo_epochs}
  shuffle: ${actor_rollout_ref.actor.shuffle}
  grad_clip: 1.0
  cliprange_value: 0.5
  checkpoint:
    contents:
    - model
    - hf_model
    - optimizer
    - extra
reward_model:
  enable: false
  strategy: fsdp
  model:
    input_tokenizer: ${actor_rollout_ref.model.path}
    path: sfairXC/FsfairX-LLaMA3-RM-v0.1
    external_lib: ${actor_rollout_ref.model.external_lib}
    use_remove_padding: false
    fsdp_config:
      wrap_policy:
        min_num_params: 0
      param_offload: false
      fsdp_size: -1
  micro_batch_size: null
  micro_batch_size_per_gpu: null
  max_length: null
  ulysses_sequence_parallel_size: 1
  use_dynamic_bsz: ${critic.use_dynamic_bsz}
  forward_max_token_len_per_gpu: ${critic.forward_max_token_len_per_gpu}
  reward_manager: naive
custom_reward_function:
  path: null
  name: compute_score
algorithm:
  gamma: 1.0
  lam: 1.0
  adv_estimator: gae
  kl_penalty: kl
  kl_ctrl:
    type: fixed
    kl_coef: 0.001
trainer:
  balance_batch: true
  total_epochs: 30
  total_training_steps: 200
  project_name: train_with_think
  experiment_name: sokoban
  logger:
  - console
  - wandb
  val_generations_to_log_to_wandb: 0
  nnodes: 1
  n_gpus_per_node: 1
  save_freq: 100
  resume_mode: disable
  resume_from_path: null
  test_freq: 10
  critic_warmup: 0
  default_hdfs_dir: null
  del_local_ckpt_after_load: false
  default_local_dir: checkpoints/${trainer.project_name}/${trainer.experiment_name}
  max_actor_ckpt_to_keep: None
  max_critic_ckpt_to_keep: None
  validation_steps: 1
  val_before_train: true
  generations_to_log_to_wandb:
    train: 128
    val: 20
  val_only: false
custom_envs:
  SimpleSokoban:
    env_type: sokoban
    max_actions_per_traj: 10
    env_instruction: You are solving the Sokoban puzzle. You are the player and you
      need to push all boxes to targets. When you are right next to a box, you can
      push it by moving in the same direction. You cannot push a box through a wall,
      and you cannot pull a box. The answer should be a sequence of actions, like
      <answer>Right || Right || Up</answer>.
    max_tokens: 100
    max_turn: 5
    env_config:
      dim_x: 6
      dim_y: 6
      num_boxes: 1
      max_steps: 100
  GSM8K_NoThink:
    env_type: gsm8k
    max_actions_per_traj: 1
    env_instruction: 'You are solving Math problems. Let''s think step by step. Always
      put the answer in integer at the end of your response. '
    max_tokens: 100
    max_turn: 1
    env_config:
      max_steps: 5
      split: train
  GSM8K_NoThink_Turn_5:
    env_type: gsm8k
    max_actions_per_traj: 5
    env_instruction: 'You are solving Math problems. Let''s think step by step. Always
      put the answer in integer at the end of your response. '
    max_tokens: 100
    max_turn: 5
    env_config:
      max_steps: 5
      split: train
  GSM8K:
    env_type: gsm8k
    max_actions_per_traj: 1
    env_instruction: You are solving Math problems. Let's think step by step. You
      should put all thinking process into <think>...</think> and then only give the
      final answer in <answer>...</answer>.
    max_tokens: 100
    max_turn: 1
    env_config:
      max_steps: 5
      split: train
  GSM8K_Turn_5:
    env_type: gsm8k
    max_actions_per_traj: 5
    env_instruction: You are solving Math problems. Let's think step by step. You
      should put all thinking process into <think>...</think> and then only give the
      final answer in <answer>...</answer>.
    max_tokens: 100
    max_turn: 5
    env_config:
      max_steps: 5
      split: train
  Blocksworld3_Sparse:
    env_type: blocksworld
    max_actions_per_traj: 20
    max_turn: 10
    env_instruction: "You are solving Blocksworld problems. Each state is represented\
      \ by a graphical stack of blocks. There are 3 blocks: block 1, block 2, and\
      \ block 3. You can only move a block if there is no other block on top of it. Each\
      \ action should be formatted as:\"move X to Y\", where X is the block number\
      \ you're moving, and Y is either 0, meaning move the block to the table; or another\
      \ block number, meaning move it on top of that block.\n\nA state is like this:\n\
      \ _ \n|2|\n ¯ \n _  _ \n|1||3|\n ¯  ¯ \nThis means: Block 2 is on top of block\
      \ 1, and Block 1, 3 is on the table. Another example:\n _ \n|1|\n ¯ \n _ \n\
      |3|\n ¯ \n _ \n|2|\n ¯ \nThis means: Block 1 is on top of block 3, Block 3 is\
      \ on top of block 2, and Block 2 is on the table. \nYou are given the current\
      \ state and the goal state, and you need to find a sequence of actions to move\
      \ the blocks to the goal state. The answer should be a sequence of actions,\
      \ like <answer>(move 2 to 0) || (move 1 to 2)</answer>"
    max_tokens: 100
    env_config:
      num_blocks: 3
      max_steps: 100
      render_mode: 2d_sparse
  Blocksworld3_1D:
    env_type: blocksworld
    max_actions_per_traj: 20
    max_turn: 10
    env_instruction: You are solving blocksworld problems. There are 3 blocks on the
      table. The state is represented by an array of 3 numbers, each number shows
      what the block is on. A value of 0 means the block is on the table. A value
      of 1, 2 or 3 means the block is on top of that block. For example, if the current
      state is [2, 0, 1], then block 1 is on top of Block 2, Block 2 is on the table,
      and Block 3 is on top of Block 1. Each action should be formatted as:"move X
      to Y", where X is the block number you're moving, and Y is either 0, meaning
      move the block to the table; or another block number, meaning move it on top
      of that block. You can only move a block if there is no other block on top of
      it. You are given the current state and the goal state, and you need to find
      a sequence of actions to move the blocks to the goal state. The answer should
      be a sequence of actions, like <answer>(move 2 to 0) || (move 1 to 2)</answer>
    max_tokens: 100
    env_config:
      num_blocks: 3
      max_steps: 100
      render_mode: 1d
  Blocksworld3_Text:
    env_type: blocksworld
    max_actions_per_traj: 20
    max_turn: 10
    env_instruction: 'You are solving blocksworld problems. There are 3 blocks: block
      1, block 2, and block 3. You can only move a block if there is no other block
      on top of it. Each action should be formatted as:"move X to Y", where X is the
      block number you''re moving, and Y is either 0, meaning move the block to the
      table; or another block number, meaning move it on top of that block. You are
      given the current state and the goal state, and you need to find a sequence
      of actions to move the blocks to the goal state. The answer should be a sequence
      of actions, like <answer>(move 2 to 0) || (move 1 to 2)</answer>'
    max_tokens: 100
    env_config:
      num_blocks: 3
      max_steps: 100
      render_mode: text
  Bird:
    env_type: bird
    max_actions_per_traj: 1
    max_turn: 1
    env_instruction: 'Translate the question into SQL given database information.
      Replay with one fenced block that contains only SQL code:

      ```sql

      ...

      ``

      .'
    max_tokens: 1024
    env_config:
      max_steps: 5
  Tetris_1:
    env_type: tetris
    max_actions_per_traj: 40
    max_turn: 10
    env_instruction: "You are solving a simplified version of Tetris puzzle. The game\
      \ board is a 4*4 grid, and blocks fall one at a time from the top. There is\
      \ only one type of block, that is 1×1 square marked in X. Your goal is to fill\
      \ the last row completely with blocks to get points, with the state such as\
      \ \n____\n____\n____\n____\nYou can only move the current block left, right,\
      \ or down. The answer should be a sequence of actions, like <answer>Left ||\
      \ Right || Down</answer> Hint: If we see empty space (_) in the last row, try\
      \ to left/right move the current block to let it drop down to the empty space."
    max_tokens: 100
    env_config:
      dim_x: 4
      dim_y: 4
      max_steps: 100
      box_type: 1
  Tetris_2:
    env_type: tetris
    max_actions_per_traj: 20
    max_turn: 10
    env_instruction: "You are solving a simplified version of Tetris puzzle. The game\
      \ board is a 4*4 grid, and blocks fall one at a time from the top. Your goal\
      \ is to fill the last row completely with blocks to get points, with the state\
      \ such as \n____\n____\n____\n####\n. You can only move the current block left,\
      \ right, or down. The answer should be a sequence of actions, like <answer>Left\
      \ || Right || Down</answer> Hint: If we see empty space (_) in the last row,\
      \ try to left/right move the current block to let it drop down to the empty\
      \ space."
    max_tokens: 100
    env_config:
      dim_x: 4
      dim_y: 4
      max_steps: 100
      box_type: 2
  LargerSokoban_Dim_8:
    env_type: sokoban
    max_actions_per_traj: 10
    env_instruction: You are solving the Sokoban puzzle. You are the player and you
      need to push all boxes to targets. When you are right next to a box, you can
      push it by moving in the same direction. You cannot push a box through a wall,
      and you cannot pull a box. The answer should be a sequence of actions, like
      <answer>Right || Right || Up</answer>
    max_tokens: 100
    max_turn: 5
    env_config:
      dim_x: 8
      dim_y: 8
      num_boxes: 1
      max_steps: 100
      search_depth: 30
  WebShop:
    env_type: webshop
    max_actions_per_traj: 30
    max_turn: 10
    env_instruction: 'You are browsing an online shop. Based on the instruction, find
      the product that matches the production description. You need to iteratively
      take action, read the website and decide what action to take next until finding
      the product. Available actions depends on the page: in the search page you can
      search keywords, in the search result page you can click an item url or click[next
      >] to navigate to next page, in the product page you can click[description]
      or click[features] to see the details, click[blue] or click[x-large] to choose
      size and colors, click[buy now] when you decided to buy the product, click[back
      to search] to return to search page. Example process: I need a gingko light
      and 20x20 pillow cover that is hand painted. First search[gingko light 20x20
      pillow cover hand painted], answer format: <answer>search[blanket with fleece
      throw]</answer>. Valid answer is search[<keywords>] or click[<clickable>].'
    max_tokens: 100
    env_config: null
system:
  CUDA_VISIBLE_DEVICES: 1
micro_batch_size_per_gpu: 4
ppo_mini_batch_size: 32
model_path: Qwen/Qwen2.5-0.5B-Instruct
agent_proxy:
  max_turn: 20
  action_sep: '||'
  max_actions_per_turn: 5
  use_turn_scores: false
  enable_think: true
  reward_normalization:
    grouping: state
    method: identity
es_manager:
  format_penalty: -0.1
  train:
    env_groups: 8
    group_size: 16
    env_configs:
      tags:
      - SimpleSokoban
      n_groups:
      - 8
  val:
    env_groups: 256
    group_size: 1
    env_configs:
      tags:
      - SimpleSokoban
      n_groups:
      - 256
ctx_manager:
  generation:
    gen_config:
      response_length: ${actor_rollout_ref.rollout.response_length}
      temperature: ${actor_rollout_ref.rollout.temperature}
      top_p: ${actor_rollout_ref.rollout.top_p}
      top_k: ${actor_rollout_ref.rollout.top_k}
      kwargs: null
